name: Gitee Release Bot
on:
  workflow_run:
    workflows: [Debian Repository Bot]
    types: [completed]

jobs:
  generate:
    name: Sync release files
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-24.04
    steps:
      - name: GetRef
        id: get_ref
        uses: actions/github-script@v7
        with:
          script: |
            const runId = context.payload.workflow_run.id;
            const response = await github.rest.actions.listJobsForWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: runId,
            });
            const jobs = response.data.jobs;
            const job = jobs.find(j => j.name === "Generate Debian repository files");
            const output = job.steps?.[1].name;
            core.setOutput('ref', output);
          result-encoding: string
      - run: echo "Running with ${{ steps.get_ref.outputs.ref }}"
      - id: get_release
        uses: actions/github-script@v7
        env:
          TAG: ${{ steps.get_ref.outputs.ref }}
        with:
          script: |
            const response = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: process.env.TAG
            });
            core.setOutput('name', response.data.name);
            core.setOutput('body', response.data.body);
      - uses: robinraju/release-downloader@v1
        with:
          tag: ${{ steps.get_ref.outputs.ref }}
          out-file-path: download/${{ steps.get_ref.outputs.ref }}
          fileName: '*'
      - id: list_files
        name: Collect files
        run: |
          # shrink to 16 files
          rm download/${{ steps.get_ref.outputs.ref }}/*.buildinfo    # -12
          rm download/${{ steps.get_ref.outputs.ref }}/*.changes      # -12
          rm download/${{ steps.get_ref.outputs.ref }}/*_armel.deb    # -2
          rm download/${{ steps.get_ref.outputs.ref }}/*_i386.deb     # -2
          rm download/${{ steps.get_ref.outputs.ref }}/*_mips64el.deb # -2
          rm download/${{ steps.get_ref.outputs.ref }}/*_mipsel.deb   # -2
          rm download/${{ steps.get_ref.outputs.ref }}/*_ppc64el.deb  # -2
          rm download/${{ steps.get_ref.outputs.ref }}/*_ppc64.deb    # -2
          rm download/${{ steps.get_ref.outputs.ref }}/*_s390x.deb    # -2
          {
            echo 'files<<EOF'
            find download/${{ steps.get_ref.outputs.ref }} -type f
            echo EOF
          } >> $GITHUB_OUTPUT
      - uses: actions/checkout@v4
        with:
          path: ${{ github.event.repository.name }}
          fetch-depth: '0'
      - id: get_old_tag
        working-directory: ${{ github.event.repository.name }}
        run: |
          echo "old_tag=`git describe --abbrev=0 --tags ${{ steps.get_ref.outputs.ref }}^^^^^^^^^^^^^^^`" >> $GITHUB_OUTPUT
        continue-on-error: true
      - working-directory: download/${{ steps.get_ref.outputs.ref }}
        name: Trim Metadata
        if: steps.get_old_tag.outcome == 'success'
        run: |
          V="${{ steps.get_old_tag.outputs.old_tag }}"
          V="${V#v}"
          for F in Packages Sources
          do
            k=0
            rm -f "$F".new
            while IFS='' read line
            do
              echo "$line" >> "$F".new
              if [ "$line" = "Version: $V-1" ]
              then
                k=1
              fi
              if [ -z "$line" -a $k -eq 1 ]
              then
                rm -f "$F".new
                k=0
              fi
            done < "$F"
            mv "$F".new "$F"
          done
          k=0
          rm -f Packages.new
          while IFS='' read line
          do
            echo "$line" >> Packages.tmp
            if [ "$line" = "Architecture: armel" -o "$line" = "Architecture: i386" -o "$line" = "Architecture: mips64el" -o "$line" = "Architecture: mipsel" -o "$line" = "Architecture: ppc64el" -o "$line" = "Architecture: ppc64" -o "$line" = "Architecture: s390x" ]
            then
              k=1
            fi
            if [ -z "$line" ]
            then
              if [ $k -eq 0 ]
              then
                cat Packages.tmp >> Packages.new
              fi
              rm -f Packages.tmp
              k=0
            fi
          done < Packages
          mv Packages.new Packages
          apt-ftparchive release . > Release
      - uses: nicennnnnnnlee/action-gitee-release@master
        if: steps.get_old_tag.outcome == 'success'
        with:
          gitee_action: delete_release
          gitee_owner: ${{ github.repository_owner }}
          gitee_repo: ${{ github.event.repository.name }}
          gitee_token: ${{ secrets.gitee_token }}
          gitee_tag_name: ${{ steps.get_old_tag.outputs.old_tag }}
        continue-on-error: true
      - uses: nicennnnnnnlee/action-gitee-release@master
        with:
          gitee_action: create_release
          gitee_owner: ${{ github.repository_owner }}
          gitee_repo: ${{ github.event.repository.name }}
          gitee_token: ${{ secrets.gitee_token }}
          gitee_tag_name: ${{ steps.get_ref.outputs.ref }}
          gitee_release_name: ${{ steps.get_release.outputs.name }}
          gitee_release_body: ${{ steps.get_release.outputs.body }}
          gitee_target_commitish: master
          gitee_upload_retry_times: 3
          gitee_files: ${{ steps.list_files.outputs.files }}
